// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User{
  id               String     @id @default(uuid())
  username         String     @unique
  imageUrl         String     @db.Text
  externalUserId   String     @unique
  bio              String?    @db.Text

  //Follow relation
  following  Follow[] @relation("following")
  followedBy Follow[] @relation("followedBy")

  //Blocked relation
  blocking   Block[]  @relation("blocking")
  blockedBy  Block[]  @relation("blockedBy")


  //Stream relation
  stream     Stream?


  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

}

model Stream{
  id String @id @default(uuid())
  name String @db.Text
  thumbnailUrl String? @db.Text

  //Stream  ids
  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  //User related features
  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  //relations
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}


model Follow{
id                  String @id @default(uuid())
followerId          String
followingId         String 
followers User @relation(name: "following",fields: [followerId],references: [id],onDelete: Cascade)
@@index([followerId])
following User @relation(name:"followedBy",fields: [followingId],references: [id],onDelete: Cascade)
@@index([followingId])
@@unique([followerId,followingId])

createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt
}

model Block{
  id               String @id @default(uuid())
  blockerId        String
  blockedId        String

  blocker User @relation(name: "blocking",fields: [blockerId],references: [id],onDelete: Cascade)
  blocked User @relation(name: "blockedBy",fields: [blockedId],references: [id],onDelete: Cascade)
  @@index([blockerId])
  @@index([blockedId])
  @@unique([blockerId,blockedId])
}


